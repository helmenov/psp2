---
title: Pandas, データフレームの扱い
jupyter: python3
toc: true
html-math-method: mathjax
#number-sections: true
#highlight-style: pygments
---
## 0. まず，

`cmd`で

```{.sh}
> poetry new k02
> cd k02
> poetry env use py
> poetry install --sync
> poetry add ipykernel
```

により，いつものように，パッケージ開発用フォルダを作り，
その下に，仮想環境(`.venv`)，配布するフォルダ(`k02`)などを作る．

### 0.1. 外部パッケージの利用

今回は，パッケージの中で，外部パッケージを使いたいので，

```{.sh}
> poetry add pandas
> poetry add openpyxl
> poetry add matplotlib
> poetry add numpy
```

というように，

- Pandas
- OpenPyXL
- MatplotLib
- NumPy

の4つの外部パッケージを仮想環境にインストールしておきます．

### 0.2. リソースの利用

パッケージには，フォルダ，モジュール(`.py`)の他に，「リソース」と呼ばれる資源を含ませることができます．（つまり，パッケージの一部として配布されます．）

配布パッケージ（フォルダ） `k02` の下の `data` というフォルダにリソースファイル `mydata1.csv` を置いているとします．

この `mydata1.csv` の「ファイルパス」は，

```{python}
from importlib import resources

# 'k02/data/__init__.py' があればフォルダである'data'をimportできる．
from k02 import data

# `resources.files(foo)` は，importしたモジュール'foo'のファイルパス
data_path = resources.files(data)
print(data_path)

# .joinpath(パス)は，パスを後ろに結合する．
fpath = data_path.joinpath('mydata1.csv')
print(fpath)
```


今回は，4 つのcsvファイルをリソースにします．

- [`mydata1.csv`]('https://raw.githubusercontent.com/helmenov/psp2/09eca8d4151bb19fa3c9c230bd1628dd9d91dfaf/d06/k02/data/mydata1.csv')
- [`mydata2.csv`]('https://raw.githubusercontent.com/helmenov/psp2/09eca8d4151bb19fa3c9c230bd1628dd9d91dfaf/d06/k02/data/mydata2.csv')
- [`mydata3.csv`]('https://raw.githubusercontent.com/helmenov/psp2/09eca8d4151bb19fa3c9c230bd1628dd9d91dfaf/d06/k02/data/mydata3.csv')
- [`heights14.csv`]('https://raw.githubusercontent.com/helmenov/psp2/09eca8d4151bb19fa3c9c230bd1628dd9d91dfaf/d06/k02/data/heights14.csv') : 課題用

### 0.3. vscode で jupyter

vscodeで配布用フォルダ `k02` の下に，`k02_1.ipynb` という名前のファイルを作り，開きます．

## 1. Pandas

### 1.1 標本の追加

最初のセルに，

```{python}
import pandas as pd

# アジア語の文字幅をきれいに表示するおまじない
pd.set_option('display.unicode.east_asian_width', True)
```

と書いて，実行します．

次に，データフレームを作ります．データフレームには変数（項目名）が必要です．

```{python}
df = pd.DataFrame(columns=['名前','性別','好きな数','誕生月','セロリ好き度','身長'])
```

dfを表示するには，普通は`print(df)`としますが，jupyterでは，`display(df)`とすると，きれいに表示されます．

```{python}
display(df)
```

今はデータがありませんので，項目名のみが表示されます．

では，データを入れていきましょう．

というか，データが1つでもデータフレームです．

```{python}
sample_0 = {
    '名前':'鈴木', '性別':'女', '好きな数':3,
    '誕生月':12, 'セロリ好き度':'好き', '身長':165
    } # dictで作ります．
df_0 = pd.DataFrame(data=[sample_0])
display(df_0)
```

別の標本は，

```{python}
sample_1 = {
    '名前':'薗田', '性別':'男', '好きな数':7,
    '誕生月':5, 'セロリ好き度':'とても嫌い', '身長':172
    }
df_1 = pd.DataFrame(data=[sample_1])
display(df_1)
```

これら2つのデータフレームを合成して，新たなデータフレーム `df` を作ります．

```{python}
df = pd.concat([df_0, df_1], ignore_index=True, axis=0)
display(df)
```

`axis=1` は，合成の方向です．標本を追加するので縦方向に合成です．縦方向は`axis=0`です．（列方向，項目を追加する場合は，`axis=1`）

### 1.2. 標本セットの読み込み

CSVファイルの読み込みは，`read_csv`関数です．

```{python}
fpath = data_path.joinpath("mydata1.csv") # data_pathはリソースファイルのあるフォルダ（既に設定済）
df = pd.read_csv(fpath, skipinitialspace=True)
display(df)
```

`skip-initial-space`はアジア語で余計な空白が入るのを防ぐので，いつもつけておくとよい．

```{python}
type(df)
```

`df`は`DataFrame`というクラスに割当てられていることがわかります．

`df.shape` データフレームの行数（観測数）と列数（変数数）をタプルで表示します．

```{python}
print(df.shape)
```

4つの観測，1つの変数となりました．

あれれ，それは違います．今回のデータは3観測(薗田と鈴木と斎藤)，6変数（名前,..., 身長）のはずなので`(3,6)`であるはずです．

ファイルを直接見ると，1行目に`# mydata1.csv`とあり，これはメモですね．読み飛ばす行番号をリストにして`skiprows`オプションに渡して読み直します．

```{python}
fpath = data_path.joinpath('mydata1.csv')
df = pd.read_csv(fpath,skipinitialspace=True, skiprows=[0])
df
```

```{python}
df.shape
```

きちんと，3観測6変数になりました．ちなみに読み飛ばした後の最初の行をヘッダ(header)と呼んでおり，変数名のリストとして読みます．

クラス変数 `columns` に変数名が保存されています．

ちなみに，ヘッダ行は観測ではないので，(4,6)ではなく(3,6)になっています．

```{python}
df.columns
```

変数名が並んだ行が無いCSVもあります．例えば`mydata2.csv`は`mydata1.csv`と同じ3観測6変数のデータですが，普通に読むと，

```{python}
fpath = data_path.joinpath('mydata2.csv')
df = pd.read_csv(fpath,skipinitialspace=True)
df
```

```{python}
df.shape
```

のように，データの1観測目がヘッダ（変数名のリスト）と捉えられてしまいます．よって，
`header`が無いことを教えて read_csv　します．( `header=None` )

```{python}
fpath = data_path.joinpath('mydata2.csv')
df = pd.read_csv(fpath,skipinitialspace=True,header=None)
df
```

ただし，ヘッダが無いので変数名が仮に0,....,5となっています．

```{python}
df.columns
```

きちんと変数名を決めるには
このクラス変数`columns`を正しいもので上書きします．

```{python}
df.columns=['Name','Sex','FavoriteNumber','BirthMonth','CeleryFavor','Height']
df
```

変数名を変えるにはrenameメソッドを使ってもよいです．

```{python}
df.rename(columns={'Sex':'Gender'})
```

ところで，データフレームを表示したときに，左端に毎回0から始まる数字が書かれています．
これは，CSVにおける観測の個体IDであり，「インデックス(index)」と呼んでいます．データ本体には含まれません．

```{python}
print(df.index)
```

今， `index` は0から始まって，1ずつ増えて，3の前までということみたいですね．

### 1.3. データを集めたら

そんなこんなで，`mydata1.csv`を読みます．

```{python}
fpath = data_path.joinpath('mydata1.csv')
df = pd.read_csv(fpath,skipinitialspace=True,header=1)
df
```

### 1.4. データフレーム上の値の参照

データフレームの参照（抽出）は，2種類あります．参照の出力もデータフレームです．

- `.loc[index名リスト, 変数名リスト]` : index名リスト，変数名リストによる参照
- `.iloc[行番号リスト, 列番号リスト]` : データの`i`行目リスト，`j`列目の指定による参照

いずれの場合も *リスト* なので，

`[1,3,2]`とか`["性別",'誕生月']` のように四角カッコの配列で指定します．

```{python}
# .loc
df.loc[[0, 1], ["好きな数"]]
```

```{python}
# .iloc
df.iloc[[0, 1], [2]]
```

配列要素が数値（数字ではなく数値ね）の場合は，`range`でリストを作ることもできます．(内側の四角カッコは無し)

`range(start,stop,step)`は
`[start+0*step, start+1*step, ..., ] < stop` を作るのでした．
```{python}
df.iloc[range(0, 1), range(2, 5, 2)]
```

`range` で作るものは，スライスと呼ばれる形で表現できます．

```{python}
df.iloc[0:1, 2:5:2]
```

#### 1.4.1. ある1つの変数だけ取り出す．

上の例でも1つの変数「`好きな数`」を取り出していましたが，全てのサンプルにおけるある1つの変数だけを見たいときがあります．

`loc`や`iloc`でもいいですが，データフレームになっています．場合によっては値のリストとして取り出したいときがあります．

`df['変数名']`でそれができます．

```{python}
display(df["好きな数"])
print(df["好きな数"].shape, type(df["好きな数"]))
```

表示がきれいではなくなりました．型（クラス）が `Series`となっているからです．

`Series`は，`DataFrame`のある変数を取り出したものになっていて，データ（値のリスト）のサイズが `(3,)` つまり，3要素のリストになっています．また，DataFrameと同様に index を持ちます(今の場合，`0`, `1`, `2`が `index`)．さらに `Name`に変数名を持ちます．

また，データは普通のリストではなく， **全ての要素が同じ型になっている特別なリスト** です（変数というのはそういうもの）．今の場合，`dtype: int64` つまり 64bit整数 という型です．

`Series`はリストと同様に順番のあるコンテナなので，順番を指定することで要素を取り出せます．

サンプル0番目と1番目は，
```{python}
df["好きな数"][[0, 1]]
```

という感じです．上のほうでも，あるサンプルのある変数の値を取り出しましたが，上のほうではDataFrameを取り出しましたが，今回はSeriesを取り出しています．

また`Series`のままだと扱いにくい場合には，list に変換できます．
```{python}
df["好きな数"].to_list()
```

### 1.5. データの要約

要約とは，変数ごとに分布の特徴（統計量）に代表する処理です．

データの要約は describeメソッドで行います．

```{python}
df.describe()
```

値が数値型の変数のみについて要約されました．

- `count`はデータの個数(sample size，サンプルサイズ)
- `mean`は平均値，`std`は *標本* の標準偏差(STandard Deviation)
- `min`は最小値，`max`は最大値，
- `25%`, `50%`, `75%`は四分位で，ヒストグラムを低い水準から並べたときに下位25％，50％，75％にあたる水準を答えるものです．下位50％はmedian（メディアン，メジアン）とも呼ばれます．

この関数の中身は，以下のDataFrameのメソッドを使っても表示されます．

```{python}
# 各変数のサンプルサイズ
df['身長'].count()
```

```{python}
# 各変数の標本平均
df['身長'].mean()
```

```{python}
# 各変数の標本中央値
df['身長'].median()
```

```{python}
# 各変数の標本標準偏差
df['身長'].std(ddof=0)
```

```{python}
# 第1四分位
df['身長'].quantile(q=0.25)
```

```{python}
# 第2四分位（中央値）
df['身長'].quantile(q=0.5)
```

```{python}
# 第3四分位
df['身長'].quantile(q=0.75)
```

### 1.6. 変数の尺度を正しく設定

ところで，身長は平均や標準偏差に意味がありますが，「好きな数」や「誕生月」にとっての平均や標準偏差は *意味不明* ですね．

「好きな数」や「誕生月」って，いわば「性別」と同じように，どれが最初でどれが最後だとか無いですね．

また，さきほどの「要約」で，変数「セロリ好き度」は単なる5段階評価値「とても嫌い，嫌い，普通，好き，とても好き」で選んでいるので，代表値や分布を考えられそうですが，文字なので「要約」ができませんでした．

ということで，各変数は，尺度（スケール，scale）を設定しなければいけません．（pandasに教えてあげなければなりません）

|尺度名|特徴|計算可能|
|---|---|---|
|名義尺度(nominal)|分類のための単なる文字・数字| `==`, `!=`, `is`, `not`|
|順序尺度(ordered)|順序関係のある文字・数字| `>`, `<`|
|間隔尺度(interval)|MKS単位系でない測定値| `+`,`-`|
|比尺度(ratio)| MKS単位系の測定値 | `*`,`/`|

間隔尺度と比尺度は見分けにくいですが，MKS単位系（メートル，キログラム，秒）を基本単位とする測定値は原器に対する比で表されるので比尺度，それ以外の単位系（または単位無し）の測定値は間隔尺度と考えられます．

では，`mydata1.csv` の各変数の尺度は何でしょうか.

また，各変数は，とりうる値のリスト（「水準」といいます）がすでに決められています．各変数の具体的な水準はどうなっているでしょうか．

|変数名|尺度|水準|
|---|---|---|
|名前|名義尺度|あらゆる人名|
|性別|名義尺度|集合{'男','女'}|
|好きな数|名義尺度|集合{'1','2','3','4','5','6','7','8','9','10','11','12'}|
|誕生月|名義尺度|集合{'1','2','3','4','5','6','7','8','9','10','11','12'}|
|セロリ好き度|順序尺度|リスト['とても嫌い'，'嫌い'，'普通'，'好き'，'とても好き']|
|身長|比尺度|あらゆる実数|


Pandasでは，それぞれの尺度に型（クラス）を割り当てています．

- 名義尺度は，`Categorical(categories=[...],ordered=False)`クラス
- 順序尺度は，`Categorical(categories=[...],ordered=True)`クラス
- 間隔尺度と比尺度は，`Float`クラス

というわけで，そのように直します．

[公式サイトの`class pandas.Categorical`](https://pandas.pydata.org/docs/reference/api/pandas.Categorical.html)

- 「名前」（名義尺度）

    尺度を設定する前

    `dtype` に，現在の型（クラス）が表示されますので，注目してください．

```{python}
df['名前']
```

    尺度を設定する前のdtypeは，`object`．object型というのは，汎用型（いわば不明）であり，所謂文字列型(str)と同義です．

    名義尺度に設定．水準を全て挙げることができないので，`categories` は指定できない．

```{python}
df['名前'] = pd.Categorical(df['名前'])
df['名前']
```

    dtypeが category になりました．水準は3種です．

- 「性別」（名義尺度）

    尺度を設定する前
```{python}
df['性別']
```

    名義尺度に設定．水準がすべて挙げられるなら `categories` に水準の集合を指定する．

```{python}
GenderSet = {'男','女'}
df['性別'] = pd.Categorical(df['性別'], categories=GenderSet, ordered=False)
df['性別']
```

- 「好きな数」，「誕生月」（名義尺度に設定）

    尺度を設定する前

    dytpeは，数なので `int64`．64ビット整数として読み取られています．
```{python}
df['好きな数']
```

    名義尺度に設定．

    ここで測定した数は，単なる選択肢で名義尺度なので，「数字」（文字）に直す．

    dtypeは文字列，`object`型になります．
```{python}
df['好きな数'] = df['好きな数'].astype('str')
df['好きな数']
```

    また，水準を全て挙げることができないので，`categories`は指定できない．

    これで，dtypeは正しく category になります．
```{python}
df['好きな数'] = pd.Categorical(df['好きな数'], ordered=False)
df['好きな数']
```

    次に，「誕生月」．尺度を設定する前は，

```{python}
df['誕生月']
```

    これも大小・優劣など無いので，名義尺度であり，文字列化する．

    また，全ての水準を挙げられるので，`categories`を指定する．

```{python}
df["誕生月"] = df["誕生月"].astype("str")
# MonthSet = {'1','2','3','4','5','6','7','8','9','10','11','12'} でもいいですが
MonthSet = set([str(n) for n in range(1, 13)])
df["誕生月"] = pd.Categorical(df["誕生月"], categories=MonthSet, ordered=False)
df["誕生月"]
```

- 「セロリ好き度」（順序尺度）

    セロリ好き度は，強弱・大小があるので，「順序尺度」．

    尺度を設定する前は，

```{python}
df['セロリ好き度']
```

    全ての水準を挙げられるので，`categories` を指定．

    また水準には順序があるので，リストに順に水準を並べる．`ordered = True` を指定．

    dtype が正しく category になります．また，水準に順位が付いてますね．
```{python}
CerelyFavorLevel = ['とても嫌い','嫌い','ふつう','好き','とても好き']
df['セロリ好き度'] = pd.Categorical(df['セロリ好き度'],categories=CerelyFavorLevel, ordered=True)
df['セロリ好き度']
```

#### あらためて要約しなおし

すべての変数の尺度を設定したので，もう一度「要約」してみましょう．

```{python}
df.describe()
```

名義尺度である「好きな数」「誕生月」が消えました．ですが，順序尺度である「セロリ好き度」は依然，出てきません．

値が数値でないと出てこないようです．考えてみると，順序尺度とはいえ，平均値や標準偏差などは数値でしか表示できませんね．水準が文字列なので無理ってことです．

### 1.7. 文字変数 を 数字 に対応付け

変数が文字列のものは，数字と対応付けすることができます．(`se.map(dict)`)

#### 1.7.1. 名義尺度

性別に対して，

- 男: -1
- 女: +1

に対応付けしたいならば，まず対応を記した辞書を作り，それをマッピングします．

マッピングしたのちも，尺度は変わらず名義尺度(Categorical, ordered=False)となっています．

*数字だからといって大小をつけられるわけではありません．*

```{python}
SexMap = {'男':-1, '女':+1}
df['性別'] = df['性別'].map(SexMap)
df['性別']
```

#### 1.7.2. 順序尺度

同様に，「セロリ好き度」も数字にしましょうか．

以下のイメージです．

```
とても嫌い(-2) < 嫌い(-1) < ふつう(0) < 好き(+1) < とても好き(+2)
```
```{python}
CerelyFavorMap = {
    "とても嫌い": -2,
    "嫌い": -1,
    "ふつう": 0,
    "好き": +1,
    "とても好き": +2,
}
df["セロリ好き度"] = df["セロリ好き度"].map(CerelyFavorMap)
df["セロリ好き度"]
```

ただし，`map`で対応付けしても，文字と数字の対応がされるだけで，数値としては扱われず，大小は評価されません．(`dtype: category`)

しかた無いので，順序尺度でなく間隔尺度に設定しなおします．
(つまりは数字を数値にする)
```{python}
df['セロリ好き度'] = df['セロリ好き度'].astype(int)
df['セロリ好き度']
```

#### あらためて「要約」

あらためて，要約します．

```{python}
df.describe()
```


### 1.8. 整然データへ変換

### 1.8.1. pivot

同じデータですが，場合によっては，次のような表でまとめているかもしれません．
```{python}
fpath = data_path.joinpath("mydata3.csv")
df2 = pd.read_csv(fpath, skipinitialspace=True, skiprows=[0])
df2
```

この「回答」という列ですが，尺度は何でしょうか？

あるときは「男」や「とても嫌い」などの文字列，あるときは「7」や「172」などの数字になっていて，なんとも言えません．

このような尺度を決めきれないような列のある表は「雑然」としています．よって「整然」データに変換します．

よく見ると「変数名」という列の値の種別ごとに表を分けると，

- `変数名`==`性別`の表

|名前|回答|
|---|---|
|薗田|男|
|鈴木|女|
|斎藤|男|

- `変数名` == `好きな数`の表

|名前|回答|
|---|---|
|薗田|7|
|鈴木|3|
|斎藤|4|

というように，それぞれの表で回答の列がある尺度や分布に統一できそうです．

むしろ，「回答」という列名ではなく，それぞれの表の名前（つまり元の変数名の値）を列名にすればよいのではないでしょうか．

この作業を *ピボット* といいます．

`pandas` では，`pivot` 関数を使います．変数名が並ぶ列と，回答が並ぶ列を指定し，それ以外の列をindexに指定すると，変換できます．

```{python}
df3 = pd.pivot(df2, columns="変数名", values="回答", index=["名前"])
df3
```

### 1.8.2. from wide to long (melt)

こんなデータがあったとします．

```{python}
df4 = pd.DataFrame(
    {
        "名前": [
            "鈴木",
            "鈴木",
            "鈴木",
            "中村",
        ]
    }
)
df4
```

### 1.9. まとめ

1. データフレームを作る
    - `pd.read_csv(csvファイル名, header=)`
        + long形式は，wide形式へ (`pd.pivot(df, columns=, values=)`)
    - `pd.DataFrame(data=[dict], columns=[])`
    - `pd.concat([df0,df1], ignore_index=True, axis=0)`
2. 整然化
    - ある列の尺度や分布が複数混ざり合っていて，別の列の値（カテゴリ）によって表を分けたほうが良さそうなら，その列の値（カテゴリ）が実は変数である．
        - -> ピボット: `pd.pivot(df,columns=var_col, values=var_val)`
    - 尺度や分布が同一の列が複数ある(wide型)なら，それらの列名は実は値である．
        - -> メルト: `pd.melt(df, id_vars=[var_id0, var_id1, ...])`
3. 尺度を設定
    - 質的変数（文字，数字）:
        - 名義尺度：`se = pd.Categorical(se, categories=[...], ordered=False)`
        - 順序尺度: `se = pd.Categorical(se, categories=[...], ordered=True)`
            - 場合によっては間隔尺度に設定しなおす．
    - 量的変数（数値）：
        - 間隔尺度・比尺度: `se = se.astype('float')`


### 1.10. クロス集計

クロス集計表を作ることもできます．クロスさせる2つの変数名を引数に並べます．

```{python}
pd.crosstab(df['性別'],df['好きな数'])
```

# 2. 課題k02

[これ](heights14.csv)は，身近の14人に性別と身長を尋ねたときの回答を集めた標本データである．`k02/k02/data/heights14.csv` とする．
```{python}
from importlib import resources
from k02 import data

data_path = resources.files(data)
fpath = data_path.joinpath("heights14.csv")

df = pd.read_csv(fpath)
df
```

で読み取れます．ヘッダー読み取りの有無等は考えてください．

また，このデータは，尺度が混ざっている列があるので，ピボットが必要です．

```{python}
# columnsを変数名が並んでる列名，今回は "Q"
# valuesを各変数の値が並んでる列名，今回は "A"
# indexを固定する列名のリスト，今回は ["ID"]
# としてピボット
df2 = df.pivot(columns="Q", values="A", index=["ID"])
display(df2)
print(df2.dtypes)
```

pivotされましたが，変数のtypeが`object`（なにがし）になっています．
このままだと，統計量が正しく計算できません（特に身長），
よって，次に尺度を正します．

変数 `性別` は，

- 値は `男` か `女`
- 名義尺度

なので，`category`に直します．`categories={'男','女'}`, `ordered=False`です．

変数 `身長` は，

- 値は，実数
- 比尺度

なので，`float`に直します．

```{python}
df2['性別'] = pd.Categorical(df2['性別'], categories={'男','女'}, ordered=False)
df2['身長'] = df2['身長'].astype(float)
display(df2)
print(df2.dtypes)
```

きちんと尺度が正されました．

## k02_1

pandasパッケージを用いて，csvファイルを読み込んでデータフレームを作成し，
この標本集団における男性と女性それぞれの「平均」と「標準偏差」を表示する関数を `k02_1.py` の中で `main()` として定義せよ．

開発手順は，

0. `k02/k02_1.ipynb` を作り，Jupyter形式で，入力セルと出力セルを確認しながらプログラミング
1. `k02/k02_1.ipynb` を `k02/k02_1.py` にエクスポートする．入力セルのみが .py にコピーされる．
    - jupyter形式ではないため `display()` は使えないので消す．
    - `poetry run python k02/k02_1.py`で確認．
2. `k02_1.py` をモジュールに書き換える．
    - import行のあとのすべての処理を `def main():` ブロックに入れる．
    - `k02_1.py` の末尾に，`if __name__ == '__main__': main()` という行を追加
3. 動作確認用に`tests/test_k02_1.py`を書いて，正しく動作することを確認

```{.py}
from k02 import k02_1

k02_1.main()
```

`k02_1.py`を以下のように，`def main()` に処理，`if __name__ == '__main__': main()` を末尾に設定，とすると，

```{.py}
import pandas as pd

def main():
    # ここに処理を書く（インデントに気をつけよ）

if __name__ == '__main__': main()
```

```{.sh}
> poetry run python k02/k02_1.py
```

は，

```{.sh}
> poetry run python
>>> from k02 import k02_1
>>> k02_1.main()
```

実行結果は

```{.sh}
==男==
平均:173.90 cm
標準偏差: 5.06 cm

==女==
平均: ◯ cm
標準偏差：　◯ cm
```

と表示されるようにせよ．（男について表示される数値は上記になるのが正解）

ちなみに，標本分散は `var(ddof=0)`，標本標準偏差は， `std(ddof=0)` で計算される．（いくつかのサイトで誤っていることを確認しているので，注意すること）

```{python}
df_M = df2[df2["性別"] == "男"]
display(df_M)
se_M_height = df_M["身長"]
display(se_M_height)
M_std = se_M_height.std(ddof=0)  # 標準偏差
M_ustd = se_M_height.std(ddof=1)  # 不偏標準偏差
print(f"標準偏差：{M_std}\n不偏標準偏差：{M_ustd}")
M_var = se_M_height.var(ddof=0)  # 分散
M_uvar = se_M_height.var(ddof=1)  # 不偏分散
print(f"分散：{M_var}\n不偏分散：{M_uvar}")
```

## k02_2

このデータはある特定の14人のデータなので，別な14人で回答を集めるたびに別の標本平均が求まる．

性別それぞれ同じ人数で回答を集めたときにその標本平均が68%の確率で収まる範囲「◯±△」を推定せよ．($\bar{x}+1\times \mathrm{SE}$)

`k02_1` と同様に最終的には モジュール`k02/k02_2.py`を作り，`tests/test_k02_2.py`で動作確認せよ．

- 「◯±△」の「◯」は，母集団の平均の裁量推定値と等しく，手元の標本の平均($\bar{x}$)と等しい．
- また，「◯±△」の「△」は，別の標本と手元の標本との誤差であり，標本誤差$\mathrm{SE}$という． $\sqrt{\frac{u^2}{N}}$ で求まる．
  - $u^2$ は母集団の分散で，標本の分散 $s^2$ と標本サイズ $N$ から「推定」できる．所謂，不偏分散と呼ばれる．

    $$
    u^2 = \frac{N}{N-1}s^2
    $$

ちなみに，母集団の分散と標準偏差は，`var(ddof=1)`，`std(ddof=1)`で計算される．（いくつかのサイトで誤っていることを確認しているので，注意すること）

実行結果は，

```{.sh}
==男==
別の標本の平均の68%信頼区間:173.90± 1.91 cm

==女==
別の標本の平均の68%信頼区間： ◯ ± △ cm
```

と表示されるようにせよ．（男について表示される数値は上記になるのが正解）

ちなみに，今回は各値を小数点以下2桁までを表示している．`x`を小数点以下2桁までで表示する場合には，**fフォーマット**で文字列を作ります．fフォーマットでは，中括弧`{x}`でxを文字列化します．また，`:`のあとに，表記方法を指定します．

```{python}
x = 3.141592
print(f"円周率は {x} です（通常表記）．")
print(f"円周率は {x:.2f} です（小数点以下2桁表示）．")
print(f"円周率は {x:.3e} です（小数点以下3桁の指数表示，つまり有効桁4桁）．")
print(f"円周率は {x:.5g} です（有効桁5桁）．")
```
